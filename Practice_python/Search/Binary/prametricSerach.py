# 파라메트릭서치?
# 최적화 문제를 결정문제(Y or N) 로 바꾸어 해결하는 기법
# ex) 특정한 조건을 만족하는 가장 알맞은 값을 빠르게 찾는 최적화 문제
# 범위를 좁혀가면서 현재 범위에서는 조건을 만족하는가?
# 이러한 문제는 일반적으로 이진 탐색을 이용해서 해결할 수 있다

# 한 봉지 안에 들어가는 떡의 총 길이는 절단기로 잘라서 맞춰줍니다.
# 절단기에 높이(H)를 지정하면 줄지어진 떡을 한번에 절단합니다.
# 높이가 H보다 긴 떡은 H의 부분이 잘릴 것이고, 낮은 떡은 잘리지 않습니다.
# 예를 들어 높이가 19, 14, 10, 17cm인 떡이 나란히 있고, 절단기 높이를 15cm로 지정하면
# 자른 뒤 쩍의 높이는 15, 14, 10, 15가 될 것입니다.
# 잘린 떡의 길이는 차례대로 4,0,0,2입니다. 손님은 6cm만큼의 길이를 가져갑니다.
# 손님이 왔을 때, 요청한 총 길이가 M일때, 적어도 M만큼의 떡을 얻기 위해 절단기에 설정할 수 있는 높이의
# 최댓갑을 구하는 프로그램을 작성하시오.

# 풀이시간 | 40분 |  시간제한 2초 | 메모리 제한 128MB | 1<=N<=1,000,000 | 1 <= M <= 2,000,000,000
# 첫째줄 N M
# 둘째줄에는 떡의 개별 높이, 총 합은 항상 M 이상이므로 필요한 양만큼 떡을 사갈 수 있다.

# 절단기 높이에 따라 충분히 얻을 수 있는지 확인 후에(Y or N) 탐색 범위를 좁힌다.
# 절단기 높이가 0~10억 -> 이렇게 큰 범위는 가장 먼저 이진 탐색을 떠올려야한다.


# w 중간점 값은 시간이 지날수록 '최적화된 값', 얻을 수 있는 떡의 길이 합이 필요한 떡의 길이보다 크거나 같을 때마다 중간점의 값 기록

n, m = list(map(int, input().split(' ')))
array = list(map(int, input().split()))
result = 0
start = 0
end = max(array)

while (start <= end):
    total = 0
    mid = (start+end)//2
    total = sum(list(map(lambda x: x-mid if x-mid >= 0 else 0, array)))
    for x in array:
        if(x > mid):
            total += x-mid
    if total < m:
        end = mid - 1
    else:
        result = mid
        start = mid+1

print(result)
